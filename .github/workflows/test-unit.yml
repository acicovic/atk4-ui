name: Unit

on:
  pull_request:
  push:
  schedule:
    - cron: '0 0/2 * * *'

jobs:
  unit-test:
    name: Unit
    runs-on: ubuntu-latest
    container:
      image: atk4/image:${{ matrix.php }}
    strategy:
      fail-fast: false
      matrix:
        php: ['latest', '8.0']
        type: ['Phpunit']
    env:
      LOG_COVERAGE: "${{ fromJSON('{true: \"1\", false: \"\"}')[matrix.php == 'latest' && matrix.type == 'Phpunit' && (github.event_name == 'pull_request' || (github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master')))] }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure PHP
        run: |
          if [ -z "$LOG_COVERAGE" ]; then rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini ; fi
          echo "opcache.enable_cli = 1" > /usr/local/etc/php/conf.d/cc.ini
          echo "opcache.jit_buffer_size = 64M" >> /usr/local/etc/php/conf.d/cc.ini
          php --version

      - name: Setup cache 1/2
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup cache 2/2
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ matrix.type }}-${{ hashFiles('composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        run: |
          if [ "${{ matrix.type }}" != "Phpunit" ] && [ "${{ matrix.type }}" != "Phpunit Lowest" ] && [ "${{ matrix.type }}" != "Phpunit Burn" ]; then composer remove --no-interaction --no-update phpunit/phpunit johnkary/phpunit-speedtrap phpunit/phpcov --dev ; fi
          if [ "${{ matrix.type }}" != "CodingStyle" ]; then composer remove --no-interaction --no-update friendsofphp/php-cs-fixer --dev ; fi
          composer remove --no-interaction --no-update 'behat/*' --dev
          if [ "${{ matrix.php }}" == "8.0" ]; then composer config platform.php 7.4.5 ; fi
          composer install --no-suggest --ansi --prefer-dist --no-interaction --no-progress --optimize-autoloader
          if [ "${{ matrix.type }}" == "Phpunit Lowest" ]; then composer update  --ansi --prefer-dist --prefer-lowest --prefer-stable --no-interaction --no-progress --optimize-autoloader ; fi
          sed -i 's/ *public function runBare(): void/public function runBare(): void { gc_collect_cycles(); $mem0 = memory_get_usage(); for ($i = 0; $i < '"$(if [ \"$GITHUB_EVENT_NAME\" == \"schedule\" ]; then echo 5; else echo 5; fi)"'; ++$i) { $this->_runBare(); if ($i === 0) { gc_collect_cycles(); $mem1 = memory_get_usage(); } } gc_collect_cycles(); $mem2 = memory_get_usage(); if ($mem2 - 3072 * 1024 > $mem0 || $mem2 - 768 * 1024 > $mem1) { $this->onNotSuccessfulTest(new AssertionFailedError("Memory leak detected! (" . round($mem0 \/ (1024 * 1024), 3) . " + " . round(($mem1 - $mem0) \/ (1024 * 1024), 3) . " + " . round(($mem2 - $mem1) \/ (1024 * 1024), 3) . " MB, " . $i . " iterations)")); } } private function _runBare(): void/' vendor/phpunit/phpunit/src/Framework/TestCase.php && cat vendor/phpunit/phpunit/src/Framework/TestCase.php | grep '_runBare('

      - name: Init
        run: |
          mkdir -p build/logs
          php demos/_demo-data/create-sqlite-db.php

      - name: "Run tests: SQLite - with JIT"
        if: startsWith(matrix.type, 'Phpunit')
        run: |
            vendor/bin/phpunit --exclude-group none --no-coverage -v

      - name: "Run tests: SQLite - without JIT"
        if: startsWith(matrix.type, 'Phpunit')
        run: |
            rm /usr/local/etc/php/conf.d/cc.ini
            vendor/bin/phpunit --exclude-group none --no-coverage -v
